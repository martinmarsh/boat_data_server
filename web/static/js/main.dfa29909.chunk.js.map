{"version":3,"sources":["Compass.js","Helm.js","Config.js","Simulator.js","App.js","index.js","media/compass_rose.svg"],"names":["SteeringCompass","props","state","error","rose","displayed","hts","heading","this","heading_svg","document","getElementById","console","log","setAttribute","heading_course","heading_rose","updateSVGCompass","className","src","compass_rose","Component","Helm","handleHTSSliderChange","event","hts_slider_value","setState","conditionSetHTS","postHts","handleTrimSliderChange","trim_slider_value","trim","isLoaded","updated","rudder","power","pitch","roll","auto_helm","auto_mode","config_host","end_point","set_hts","local_control","local_control_count_down","undefined","url","fetch","then","response","json","result","calibration","method","headers","body","JSON","stringify","getCompass","timer","setInterval","setHTS","clearInterval","value","Math","round","set_value","power_bar","power_width","abs","rudder_mark","colour","auto_colour","auto_text","compass","cal","compass_cal","accel_cal","giro_cal","sys_cal","auto_style","color","backgroundColor","padding","fontFamily","width","height","x","y","fill","onClick","aria-labelledby","onChange","size","adjust","style","setAutoMode","Config","handleCalibrationButton","action","set_cal","postCalibration","handleTsfSliderChange","slider_tsf","handleGainSliderChange","slider_gain","tsf","gain","gain_slider_multiplier","tsf_slider_multiplier","can_update","setCalibrationState","setTimeout","getCalibration","variant","e","TabContainer","component","children","App","handleChange","r","conf","host","classes","position","label","container","root","spacing","item","course","paper","withStyles","theme","flexGrow","palette","background","unit","textAlign","text","secondary","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.dfa29909.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport compass_rose from './media/compass_rose.svg';\nimport ReactSVG from 'react-svg';\n\n\nclass SteeringCompass extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            rose: 0,\n\n        };\n        this.displayed = {\n            rose: -1,\n            hts: -1,\n            heading: -1,\n        }\n    }\n\n    updateSVGCompass(){\n        let {heading, hts} = this.props;\n        let rose = this.state.rose;\n        if (heading !== this.displayed.heading) {\n            // $('#headingDisplay').val(this.heading);\n            const heading_svg = document.getElementById('compass_heading');\n            if (heading_svg) {\n                console.log(heading_svg);\n                heading_svg.setAttribute(\"transform\", \"rotate(\" + heading + \",600,600)\");\n                //heading_svg.setAttribute(\"transform-origin\", \"600 600\");\n                this.displayed.heading = heading\n                }\n        }\n        if (hts !== this.displayed.hts){\n            const heading_course = document.getElementById('compass_course');\n            if(heading_course){\n                console.log(heading_course);\n                heading_course.setAttribute(\"transform\", \"rotate(\" + hts  + \",600,600)\");\n                //heading_course.setAttribute(\"transform-origin\", \"50% 50%\");\n            }\n        }\n        if (rose !== this.displayed.rose){\n            const heading_rose = document.getElementById('compass_rose');\n            if(heading_rose) {\n                console.log(heading_rose);\n                heading_rose.setAttribute(\"transform\", \"rotate(\" + rose + \",600,600)\");\n                //heading_rose.setAttribute(\"transform-origin\", \"50% 50%\");\n                this.displayed.rose = rose\n            }\n        }\n    }\n\n    render() {\n        this.updateSVGCompass();\n    return (\n        <div className=\"App-Compass\">\n            <ReactSVG src={compass_rose} />\n        </div>\n\n    );\n  }\n}\n\nexport default SteeringCompass;\n","import React, { Component } from 'react';\nimport Slider from '@material-ui/lab/Slider';\nimport SteeringCompass from './Compass';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport {config_host} from './App';\n\n\nclass Helm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            updated: false,\n            hts: 0,\n            heading: 0,\n            rose: 0,\n            rudder: 0,\n            power: 0,\n            pitch: 0,\n            roll: 0,\n            auto_helm: 0,\n            auto_mode: 0,\n            hts_slider_value: 50,\n            trim_slider_value: 50,\n        };\n        console.log('configuration:' + config_host);\n        //this.url = process.env.REACT_APP_THIS_HOST + \":8079/api/orientation\";\n        this.end_point = \"/api/orientation\";\n        this.set_hts = 0;\n        this.local_control = 0;\n        this.local_control_count_down = 3;\n    }\n\n    getCompass(){\n        console.log('configuration:' + config_host);\n\n        if(config_host !== \"\") {\n            if(this.url === undefined) {\n                this.url = config_host + this.end_point;\n            }\n            fetch(this.url)\n                .then(response => response.json())\n                .then(\n                    (result) => {\n                        this.setState({\n                            isLoaded: true,\n                            updated: true,\n                            hts: result.hts,\n                            heading: result.heading,\n                            pitch: result.pitch,\n                            roll: result.roll,\n                            rudder: result.rudder,\n                            power: result.power,\n                            calibration: result.calibration,\n                            auto_helm: result.auto_helm,\n                        });\n                    },\n                    // Note: it's important to handle errors here\n                    // instead of a catch() block so that we don't swallow\n                    // exceptions from actual bugs in components.\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            updated: false,\n                            error\n                        });\n\n                    }\n                );\n        }\n    }\n\n    postHts(){\n        fetch(this.url, {\n            method: 'post',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                    \"hts\": this.set_hts,\n                    \"auto_mode\": this.state.auto_mode\n                })\n        }).then(result=>result.json())\n            .then(result => {\n                    this.local_control = this.local_control_count_down;\n                    this.setState({\n                        isLoaded: true,\n                        updated: true,\n                        hts: result.hts,\n                        heading: result.heading,\n                    });\n                },\n            );\n\n    }\n\n    componentDidMount() {\n        this.getCompass();\n        this.timer = setInterval(() => {\n            this.getCompass();\n            if(this.set_hts !== this.state.hts){\n                if(this.local_control > 0) {\n                    this.local_control--;\n                }else {\n                    this.setHTS(this.state.hts);\n                }\n            }\n        }, 333);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.timer);\n    }\n\n    conditionSetHTS(value){\n        if(value < 0){\n            value = 360 + value;\n        }\n        if (value > 360){\n            value -= 360\n        }\n        this.set_hts = Math.round(value);\n    }\n\n    setHTS(value){\n        this.conditionSetHTS(value);\n        let  hts_slider_value = Math.round(this.set_hts/3.6 + 50);\n        if(hts_slider_value < 0){\n            hts_slider_value = 100 + hts_slider_value;\n        }\n        if(hts_slider_value > 100){\n            hts_slider_value -= 100;\n        }\n        this.setState({ hts_slider_value });\n    }\n\n    setAutoMode(value){\n        let set_value = 2;\n        if (value === 1){\n            set_value = 1;\n        }\n        this.state.auto_mode = set_value;\n    }\n\n    handleHTSSliderChange = (event, hts_slider_value) => {\n        this.setState({ hts_slider_value });\n        this.conditionSetHTS((hts_slider_value-50) * 3.6);\n        this.postHts();\n    };\n\n    handleTrimSliderChange = (event, trim_slider_value) => {\n        this.setState({ trim_slider_value });\n        let trim = (trim_slider_value - 50) /10 + this.state.hts_slider_value - 50;\n        this.conditionSetHTS(trim * 3.6);\n        this.postHts();\n    };\n\n    render() {\n        const { hts_slider_value, hts,  trim_slider_value,\n            calibration, rudder, power, pitch, roll, auto_helm } = this.state;\n        let { heading } = this.state;\n        heading = Math.round(heading);\n        let power_bar = 180;\n        let power_width = 180 * Math.abs(power/1000000);\n        let rudder_mark = 178 + rudder/30*178;\n        let colour = \"green\";\n        if(power < 0){\n            colour = \"red\";\n            power_bar = 180 - power_width;\n        }\n        let auto_colour = \"red\";\n        let auto_text = \"OFF - Press to turn on\"\n        if(auto_helm === 1){\n            auto_colour = \"green\";\n            auto_text = \"ON  - Press to turn off \"\n        }\n        let cal = calibration;\n        let compass_cal = cal & 0x3;\n        cal = cal >>> 2;\n        let accel_cal = cal & 0x3;\n        cal = cal >>> 2;\n        let giro_cal = cal & 0x3;\n        cal = cal >>> 2;\n        let sys_cal = cal & 0x3;\n\n        const auto_style = {\n            color: \"white\",\n            backgroundColor: auto_colour ,\n            padding: \"10px\",\n            fontFamily: \"Arial\"\n        };\n\n        let compass;\n        if(this.state.updated){\n            compass =  <SteeringCompass hts={this.set_hts} heading={this.state.heading} />\n        }else{\n            compass = <Paper><h2>No Communication: {this.url}</h2></Paper>;\n        }\n    return (\n                <div>\n                    <div className=\"floatLeft\">{calibration}: s{sys_cal} g{giro_cal} a{accel_cal} c{compass_cal}</div>\n                    <h4>Roll <b>{roll}</b>  &nbsp;&nbsp; &nbsp;Pitch <b>{pitch}</b></h4>\n                    <div className=\"pad\">\n                        {compass}\n                    </div>\n\n                    <div className=\"pad\">\n                        <svg width=\"410\" height=\"8\">\n                            <rect x={power_bar} y=\"4\" width={power_width} height=\"2\" fill={colour} />\n                            <rect x={rudder_mark} width=\"4\" height=\"8\" fill=\"blue\" />\n                            <rect x=\"179\"  width=\"2\" height=\"8\" fill=\"black\" />\n                            <rect x=\"0\"  width=\"2\" height=\"8\" fill=\"black\" />\n                            <rect x=\"360\"  width=\"2\" height=\"8\" fill=\"black\" />\n\n                        </svg>\n                        <h3>Heading <b>{heading}</b> M &nbsp;&nbsp; &nbsp;HTS <b>{hts}</b> M</h3>\n                        <h4>Course to Steer: </h4>\n                        <div>\n                            <span className=\"floatLeft\">\n                                <Button  color=\"primary\" onClick={\n                                ()=>{\n                                    this.setHTS( this.set_hts - 85);\n                                    this.postHts();\n                                }}>-85</Button>\n                                <Button   color=\"primary\" onClick={\n                                ()=>{\n                                    this.setHTS( this.set_hts - 5);\n                                    this.postHts();\n                                }}>-5</Button>\n                            </span>\n                            <span className=\"floatRight\">\n                                <Button color=\"primary\" onClick={\n                                ()=>{\n                                    this.setHTS( this.set_hts + 5);\n                                    this.postHts();\n                                }}>+5</Button>\n\n                                <Button color=\"primary\" onClick={\n                                ()=>{\n                                    this.setHTS( this.set_hts + 85);\n                                    this.postHts();\n                                }}>+85</Button>\n                            </span>\n                            <Slider\n                                value={hts_slider_value}\n                                aria-labelledby=\"set hts\"\n                                onChange={this.handleHTSSliderChange}\n                            />\n\n                        </div>\n                    <br /> <br />\n                    <h4>Trim Course:</h4>\n                        <Slider\n                            value={trim_slider_value}\n                            aria-labelledby=\"trim course\"\n                            onChange={this.handleTrimSliderChange}\n                        />\n                        <br/>\n                        <Button size=\"small\" color=\"primary\"  onClick={\n                            ()=>{\n                                this.local_control = this.local_control_count_down;\n                                let adjust = (trim_slider_value - 50)  * 0.36;\n                                this.setHTS(this.set_hts-adjust);\n                                this.setState({ trim_slider_value: 50 });\n                            }} >\n                            Keep\n                        </Button>\n\n                        <Button size=\"small\" color=\"primary\" onClick={\n                            ()=>{\n                                this.conditionSetHTS((hts_slider_value-50) * 3.6);\n                                this.postHts();\n                                this.setState({ trim_slider_value: 50 });\n                            }}>Return</Button>\n\n                        <div className=\"floatRight\" style={auto_style} onClick={\n                            () => {\n                                this.setAutoMode(auto_helm);\n                                this.postHts();\n                            }}>{auto_text}</div>\n                    </div>\n                </div>\n\n    );\n  }\n}\n\nexport default Helm;\n","import React, { Component } from 'react';\nimport Slider from '@material-ui/lab/Slider';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport {config_host} from \"./App\";\n\n\nclass Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            updated: false,\n            tsf: 0,\n            gain: 0,\n            set_cal: 0,\n            slider_tsf: 0,\n            slider_gain: 0,\n            gain_slider_multiplier: 6400,\n            tsf_slider_multiplier: 1.5\n        };\n\n        this.end_point = \"/api/calibration\";\n        this.can_update = true;\n\n    }\n\n    setCalibrationState(result){\n        let gain = result.gain;\n        let tsf = result.tsf;\n\n        this.setState({\n            isLoaded: true,\n            updated: true,\n            gain: gain,\n            tsf: tsf,\n            slider_gain: Math.round(gain/this.state.gain_slider_multiplier),\n            slider_tsf: Math.round(tsf/this.state.tsf_slider_multiplier),\n            set_cal: result.set_cal,\n            calibration: result.calibration,\n        });\n    }\n\n    getCalibration(){\n        if(config_host !== \"\") {\n            if (this.url === undefined) {\n                this.url = config_host + this.end_point;\n            }\n            fetch(this.url)\n                .then(response => response.json())\n                .then(\n                    (result) => {\n                        this.setCalibrationState(result);\n                    },\n                    // Note: it's important to handle errors here\n                    // instead of a catch() block so that we don't swallow\n                    // exceptions from actual bugs in components.\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            updated: false,\n                            error\n                        });\n\n                    }\n                );\n        }\n    }\n\n    postCalibration(){\n        if(this.can_update) {\n            this.can_update = false;\n            setTimeout(() => {\n                // Your code here\n\n                fetch(this.url, {\n                    method: 'post',\n                    headers: {\n                        'Accept': 'application/json, text/plain, */*',\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        \"gain\": Math.round(this.state.slider_gain * this.state.gain_slider_multiplier),\n                        \"tsf\": Math.round(this.state.slider_tsf * this.state.tsf_slider_multiplier),\n                        \"set_cal\": this.state.set_cal,\n                    })\n                }).then(result => result.json())\n                    .then(result => {\n                            this.setCalibrationState(result);\n                            this.can_update = true;\n                        },\n                    );\n\n            }, 1000);\n        }\n    }\n\n    componentDidMount() {\n        this.getCalibration();\n        this.timer = setInterval(() => {\n            this.getCalibration();\n        }, 5000);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.timer);\n    }\n\n\n    handleCalibrationButton= (event, action) => {\n        this.setState({set_cal: action});\n        this.postCalibration();\n    };\n\n\n    handleTsfSliderChange = (event, slider_tsf) => {\n        this.setState({slider_tsf: Math.round(slider_tsf)});\n        this.postCalibration();\n    };\n\n\n    handleGainSliderChange = (event, slider_gain) => {\n        this.setState({slider_gain: Math.round(slider_gain)});\n        this.postCalibration();\n    };\n\n\n\n    render() {\n        const {slider_tsf, slider_gain, } = this.state;\n        let message;\n        if(this.state.updated){\n            message =\n\n                <div>\n\n                <br /><br />\n                <h3>Gain: {slider_gain}%</h3>\n                <Slider\n                value={slider_gain}\n                aria-labelledby=\"set gain\"\n                onChange={this.handleGainSliderChange}\n                />\n\n                <br /><br />\n                <h3>Reduce Desired Turn Rate (tsf): {slider_tsf}%</h3>\n                <Slider\n                value={slider_tsf}\n                aria-labelledby=\"set tsf\"\n                onChange={this.handleTsfSliderChange}\n                />\n\n\n\n                <br /><br />\n                <Paper className=\"pad\">\n\n                <h3>Compass/Orientation Chip Calibration:</h3>\n                <Button variant=\"contained\" size=\"small\" color=\"primary\"  onClick={\n                (e)=>{\n                    this.handleCalibrationButton(e, 1);\n\n                }}>Erase</Button>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={\n                (e)=>{\n                    this.handleCalibrationButton(e, 2)\n                }}>Store</Button>\n                <br /><br /><br />\n                </Paper>\n                </div>\n\n        }else{\n            message = <Paper><h2>No Communication: {this.url}</h2></Paper>\n        }\n        return(message);\n  }\n}\n\nexport default Config;\n","import React, { Component } from 'react';\nimport Slider from '@material-ui/lab/Slider';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Paper from '@material-ui/core/Paper';\nimport {config_host} from './App';\n\n\n\nclass Simulator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            updated: false,\n            on: 0,\n            gain: 0,\n            speed: 0,\n            power_bias: 0,\n            slider_gain: 0,\n            slider_speed: 0,\n            slider_power_bias: 0,\n            checkedSimulator: 0,\n        };\n\n        this.end_point = \"/api/simulation\";\n        this.can_update = true;\n        this.gain_scale = 1;\n        this.speed_scale = 10;\n        this.power_bias_scale = .5;\n\n    }\n\n    setSimulationState(result){\n        this.setState({\n            isLoaded: true,\n            updated: true,\n            on: result.on,\n            gain: result.gain,\n            speed: result.speed,\n            power_bias: result.power_bias,\n            checkedSimulator: result.on,\n            slider_gain: Math.round(result.gain * this.gain_scale ),\n            slider_speed: Math.round(result.speed * this.speed_scale),\n            slider_power_bias: Math.round(result.power_bias * this.power_bias_scale/10),\n        });\n    }\n\n    getSimulation(){\n        if(config_host !== \"\") {\n            if (this.url === undefined) {\n                this.url = config_host + this.end_point;\n            }\n            fetch(this.url)\n                .then(response => response.json())\n                .then(\n                    (result) => {\n                        this.setSimulationState(result);\n                    },\n                    // Note: it's important to handle errors here\n                    // instead of a catch() block so that we don't swallow\n                    // exceptions from actual bugs in components.\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            updated: false,\n                            error\n                        });\n\n                    }\n                );\n        }\n    }\n\n    postSimulation(){\n        if(this.can_update) {\n            this.can_update = false;\n            setTimeout(() => {\n                // Your code here\n                let on = 0;\n                if(this.state.checkedSimulator){\n                    on = 2;\n                }\n                fetch(this.url, {\n                    method: 'post',\n                    headers: {\n                        'Accept': 'application/json, text/plain, */*',\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        on: on,\n                        gain: this.state.gain,\n                        speed: this.state.speed,\n                        power_bias: this.state.power_bias,\n                    })\n                }).then(result => result.json())\n                    .then(result => {\n                            this.setSimulationState(result);\n                            this.can_update = true;\n                        },\n                    );\n\n            }, 1000);\n        }\n    }\n\n    componentDidMount() {\n        this.getSimulation();\n        this.timer = setInterval(() => {\n            this.getSimulation();\n        }, 5000);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.timer);\n    }\n\n    handleSpeedSliderChange = (event, slider_speed) => {\n        let speed = (slider_speed / this.speed_scale).toFixed(1);\n        this.setState({ slider_speed, speed });\n        this.postSimulation();\n\n    };\n\n    handlePowerBiasSliderChange =(event, slider_power_bias) => {\n        slider_power_bias -= 50;\n        let power_bias = (slider_power_bias / this.power_bias_scale * 10).toFixed(0);\n        this.setState({ slider_power_bias, power_bias});\n        this.postSimulation();\n\n    };\n    handleGainSliderChange = (event, slider_gain) => {\n        let gain = ((slider_gain)/ this.gain_scale).toFixed(0);\n        this.setState({slider_gain, gain});\n        this.postSimulation();\n    };\n\n    handleChange = name => event => {\n        this.setState({ [name]: event.target.checked });\n        this.postSimulation()\n    };\n\n    render() {\n        const {slider_speed, slider_gain, slider_power_bias} = this.state;\n        let message;\n        let simulator_control = <FormGroup row>\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={this.state.checkedSimulator}\n                        onChange={this.handleChange('checkedSimulator')}\n                        value=\"checkedSimulator\"\n                        color=\"primary\"\n                    />\n                }\n\n                label=\"Simulator On\"\n            />\n        </FormGroup>;\n\n\n        if(this.state.updated){\n            if(this.state.on) {\n                message = <div>\n                    <br/><br/>\n                    {simulator_control}\n                    <br/><br/>\n                    <h3>Speed: {(slider_speed / this.speed_scale).toFixed(1)} kts</h3>\n                    <Slider\n                        value={slider_speed}\n                        aria-labelledby=\"set speed\"\n                        onChange={this.handleSpeedSliderChange}\n                    />\n\n\n                    <br/><br/>\n                    <h3>Gain: {Math.round( slider_gain / this.gain_scale)}</h3>\n                    <Slider\n                        value={slider_gain}\n                        aria-labelledby=\"set kd\"\n                        onChange={this.handleGainSliderChange}\n                    />\n\n                    <br/><br/>\n                    <h3>Applied force: {(slider_power_bias / this.power_bias_scale).toFixed(0)}% max drive</h3>\n                    <Slider\n                        value={slider_power_bias + 50}\n                        aria-labelledby=\"set power bias\"\n                        onChange={this.handlePowerBiasSliderChange}\n                    />\n                    <br/><br/>\n\n                </div>\n            }else{\n                message =<div>\n                    <br/><br/>\n                        {simulator_control}\n                        <br/><br/>\n                </div>\n            }\n        }else{\n            message = <Paper><h2>No Communication: {this.url}</h2></Paper>\n        }\n    return (message);\n  }\n}\n\nexport default Simulator;\n","import React, { Component } from 'react';\nimport \"./css/App.css\";\nimport \"what-input\";\nimport Helm from './Helm';\nimport Config from './Config';\nimport Simulator from './Simulator';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nfunction TabContainer(props) {\n    return (\n        <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n            {props.children}\n        </Typography>\n    );\n}\n\nlet config_host = \"\";\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    course:{\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: 680,\n        width: 410,\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n});\n\n\nclass App  extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n        };\n        fetch('/config.json')\n            .then((r) => r.json())\n            .then( conf  => {\n                console.log(\"read config:\" + conf.host);\n                config_host = conf.host;\n            });\n    }\n\n    handleChange = (event, value) => {\n        this.setState({ value });\n    };\n\n\n    render() {\n        const { classes } = this.props;\n        const { value } = this.state;\n        return (\n            <div>\n                <CssBaseline />\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        Navigation Dashboard  NavDash v0.7\n                    </Toolbar>\n\n                    <Tabs value={value} onChange={this.handleChange}>\n                        <Tab label=\"Heading\" />\n                        <Tab label=\"Steering\" />\n                        <Tab label=\"Auto-helm Set Up\" />\n                    </Tabs>\n                </AppBar>\n                {value === 0 && <TabContainer>\n                    <Grid container className={classes.root} spacing={24}>\n                        <Grid item>\n                            <Paper  className={classes.course}><Helm /></Paper>\n                        </Grid>\n                    </Grid>\n                </TabContainer>}\n                {value === 1 && <TabContainer>\n                    <Grid container className={classes.root} spacing={24}>\n                        <Grid item>\n                            <Paper className={classes.course}>\n                                <Helm />\n                            </Paper>\n                        </Grid>\n\n                        <Grid item>\n                            <Paper className={classes.paper} >\n                                <h2>Steering</h2>\n\n                            </Paper>\n                        </Grid>\n\n                    </Grid>\n                </TabContainer>}\n                {value === 2 && <TabContainer>\n                    <Grid container className={classes.root} spacing={24}>\n                        <Grid item>\n                            <Paper className={classes.course}>\n                                <Helm />\n                            </Paper>\n                        </Grid>\n\n                        <Grid item>\n                            <Paper className={classes.paper} >\n                            <h2>Configuration</h2>\n                            <Config />\n                            </Paper>\n                        </Grid>\n\n                    </Grid>\n                </TabContainer>}\n            </div>\n        );\n    }\n}\n\n\nexport default withStyles(styles)(App);\nexport  {config_host};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/compass_rose.4794f22a.svg\";"],"sourceRoot":""}